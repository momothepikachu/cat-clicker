let model = {
	currentCat: ['Fluffy', 0, 'https://s26.postimg.cc/z0zsukx6x/Fluffy.jpg'],
	cats: {
		Fluffy: ['Fluffy', 0, 'https://s26.postimg.cc/z0zsukx6x/Fluffy.jpg'],
		Jumpy: ['Jumpy', 0, 'https://s26.postimg.cc/cp2016qd5/Jumpy.jpg'],
		Tom: ['Tom', 0, 'https://s26.postimg.cc/5ylirrimx/Tom.jpg']
	}
};

let octopus = {
	init: function () {
		view.init();
	},
	// Find the corresponding cat by name and click it n times
	catCount: function (name, n) {
		model.cats[name][1] += n;
		return model.cats[name][1];
	},
	getCats: function () {
		return model.cats;
	},
	setCurrentCat: function (cat) {
		model.currentCat = octopus.getCats()[cat];
	},
	getCurrentCat: function () {
		return model.currentCat;
	},
	saveContent: function (cat) {
		let catInfo = model.currentCat;
		let newCatName = document.querySelector('input[name=\'Name\']').value;
		catInfo[0] = newCatName;
		catInfo[2] = document.querySelector('input[name=\'ImgURL\']').value;
		catInfo[1] = Number(document.querySelector('input[name=\'#Clicks\']').value);
		delete model.cats[cat];
		model.cats[newCatName] = catInfo;
		view.renderList();
		view.catList.value = newCatName;
		view.catList.dispatchEvent(new Event('change'));
		view.adminButton.click();
	}
};

let view = {
	init: function () {
		this.catList = document.querySelector('select');
		this.count = document.querySelector('.count');
		this.img = document.querySelector('img');
		this.name = document.querySelector('.name');
		this.adminButton = document.querySelector('button.admin');
		this.form = document.querySelector('.form');
		this.saveButton = document.querySelector('.save');
		this.cancelButton = document.querySelector('.cancel');
		this.renderList();
		this.renderImg();
		this.renderCount();
		this.toggleAdmin();
		this.formContent();
		this.submitForm();
		this.cancelForm();
	},
	renderList: function () {
		let cats = octopus.getCats();
		this.catList.innerHTML = '';
		// Build selection of cats in the dropdown menu
		for (const i in cats) {
			let option = document.createElement('option');
			option.textContent = cats[i][0];
			this.catList.appendChild(option);
		}
	},
	renderImg: function () {
		// Change cat image according to your selection
		this.catList.addEventListener('change', function (e) {
			let catName = e.target.value;
			console.log(catName);
			octopus.setCurrentCat(catName);
			console.log(octopus.getCurrentCat());
			view.formContent();
			view.img.src = octopus.getCurrentCat()[2];
			view.name.textContent = catName;
			view.count.textContent = octopus.catCount(catName, 0);
		}, false);
	},
	renderCount: function () {
		// Count the number of clicks unique to each cat
		view.img.addEventListener('click', function () {
			//get the name of img
			let selected = octopus.getCurrentCat()[0];
			view.count.textContent = octopus.catCount(selected, 1);
		}, false);
	},
	toggleAdmin: function () {
		this.adminButton.addEventListener('click', function () {
			view.form.classList.toggle('hidden');
			view.formContent();
		});
	},
	formContent: function () {
		document.querySelector('input[name=\'Name\']').value = octopus.getCurrentCat()[0];
		document.querySelector('input[name=\'ImgURL\']').value = octopus.getCurrentCat()[2];
		document.querySelector('input[name=\'#Clicks\']').value = octopus.getCurrentCat()[1];
	},
	submitForm: function () {
		this.saveButton.addEventListener('click', function () {
			let catName = octopus.getCurrentCat()[0];
			octopus.saveContent(catName);
		});
	},
	cancelForm: function () {
		this.cancelButton.addEventListener('click', function () {
			view.form.classList.toggle('hidden');
		});
	}
};
octopus.init();
// let names = ['Fluffy', 'Jumpy', 'Tom'];
// let counts = [0, 0, 0];
// let img = document.querySelector('img');
// let name = document.querySelector('.name');

// // Find the corresponding cat by name and click it n times
// function catCount(name, n) {
// 	let index = names.indexOf(name);
// 	counts[index] += n;
// 	document.querySelector('.count').textContent = counts[index];
// }

// // Build selection of cats in the dropdown menu
// for (let i=0; i<names.length; i++){
// 	let option = document.createElement('option');
// 	option.textContent = names[i];
// 	document.querySelector('select').appendChild(option);
// }

// // Change cat image according to your selection
// document.querySelector('select').addEventListener('change', function(e){
// 	let catName = e.target.value;
// 	let src = 'img/'+catName+'.jpg';	
// 	img.src = src;
// 	name.textContent = catName;
// 	catCount(catName, 0);
// }
// 	, false);

// // Count the number of clicks unique to each cat
// document.querySelector('img').addEventListener('click', function(e){
// 	let selected = e.target.src.split('/').pop().split('.')[0];
// 	catCount(selected, 1);
// }, false);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
